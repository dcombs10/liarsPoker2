<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Liar's Poker</title>
  <script
  src="https://code.jquery.com/jquery-3.5.1.min.js"
  integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
  crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css">
  <script src="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js"></script>
  <script>
    const roomName = "<%= roomName %>"
  </script>

  <style>
    /* body {
      display: flex;
      justify-content: center;
    } */
  </style>
</head>
<body>
  <div class="ui segment" >
        <h1>Welcome to Liar's Poker</h1>
        Game Room Link:  <a href="liars-poker.net/room/<%= roomName %>">liars-poker.net/room/<%= roomName %></a>
    <div class="ui right internal rail">
      <div class="ui segment">
        <div class="ui huge label" style="padding-top: 1em;">
          Current Call:
          <div class="detail" style="font-size: 1.7rem;">
            (x<span id="currentQuantity">1</span>) 
            <span id="currentValue">2</span>'s
          </div>
        </div>
      </div>
    </div>
  </div>
  
    <div class="ui container" style="padding-top: 1em; padding-bottom: 1em;">
      <div id="players-dice" class="ui stackable twelve column grid" style="padding-top: 1em;">
    </div>
    

    <div class="ui container" id="turnOptions">
      <form action="" id="raiseForm" class="ui equal width form" style="padding-top: 2rem;">
        <div class="fields">
          <div class="field">
            <div class="ui labeled input">
              <div class="ui label">Raise Quantity:</div>
              <input id="raiseQuantity" type="number" min=1 name="raiseQuantity">
            </div>    
          </div>
          <div class="field">
            <div class="ui labeled input">     
              <div class="ui label">Raise Value:</div>
              <input id="raiseValue" type="number" min=1 max=6 name="raiseValue">
            </div>   
          </div>
          <div class="field">
            <button id="raiseButton" class="ui blue button" onclick="myFunction(this)">Submit Raise</button>
          </div>
          <div class="field">
            <button id="callButton" class="ui red button" onclick="myFunction(this)">Call</button>
          </div>
        </div>
      </form>
    </div>
  
    <div id="player-board" style="padding-top: 2rem;">
    </div>
  </div>
  

<script src="/socket.io/socket.io.js"></script>
<script>
    const socketURL =
      process.env.NODE_ENV === 'production'
      ? window.location.hostname
      : 'https://localhost:3000';
  const socket = io(socketURL, {secure: true})

  const playersDice = document.getElementById('players-dice')
  const playerBoard = document.getElementById("player-board");
  const turnOptions = document.getElementById("turnOptions");
  const currentValue = document.getElementById("currentValue");
  const currentQuantity = document.getElementById("currentQuantity");
  const raiseValue = document.getElementById("raiseValue");
  const raiseQuantity = document.getElementById("raiseQuantity");
  
  let playerNumber;
  let playerTurn;
  let playerName;
  let playerData = {};
  let tbl;
  let playerTableHeader = `<table  class="ui selectable celled table">
                           <th>Player Number</th>
                           <th>Player Name</th>
                           <th>Dice Count</th>
                           <th>Response</th>
                           <th>Score</th>`

  function myFunction(elem) {
    var playerAction = elem.id;
    switch(playerAction) {
      case 'raiseButton':
        raiseData = {
          room: roomName,
          playerTurn: playerTurn,
          currentValue: currentValue.innerText,
          currentQuantity: currentQuantity.innerText,
          raiseValue: raiseValue.value,
          raiseQuantity: raiseQuantity.value,
        }
        if(raiseData.raiseValue == '' || raiseData.raiseQuantity == ''){
          alert('You must enter a valid Raise Quantity & Value. Otherwise, you may choose to "call".')
        } else{
          getPlayerBoardData();
          resetResponses(playerName); // updates response to "Raised bed" for a particular player in the 'tbl' variable; sets all other players' responses back to "Awaiting turn..."
          socket.emit('raise', [raiseData, tbl]);
        }
        break;
      case 'callButton':
        callData = {
          room: roomName,
          playerTurn: playerTurn,
          currentValue: currentValue.innerText,
          currentQuantity: currentQuantity.innerText,
        }
        // capture current player board
        getPlayerBoardData();
        changeResponse(playerName); // updates response to "call" for a particular player in the 'tbl' variable
        socket.emit('call', [callData, tbl])
        break;
      default:
        return false;
    }
  }

  function changeResponse( playerName) {
      for (let i in tbl) {
        if (tbl[i].playerName == playerName) {
            tbl[i].response = 'Call';
            break; //Stop this loop, we found it!
        }
      }
    }

  function resetResponses( playerName) {
      for (let i in tbl) {
        if (tbl[i].playerName == playerName) {
            tbl[i].response = 'Raised the bet';
        } else {
            tbl[i].response = 'Awaiting turn...'
        }
      }
    }

  function checkIfYourTurn(playerTurn, playerNumber){
    if(playerTurn != playerNumber) {
      turnOptions.style.display = "none"
    } else {
      turnOptions.style.cssText = "display: inline; padding-top: 2rem;";
    }
  }

  function getPlayerBoardData(){
    tbl = $('#player-board tr:has(td)').map(function(i, v) {
          let $td =  $('td', this);
            return {
                      playerNumber: $td.eq(0).text(),
                      playerName: $td.eq(1).text(),
                      diceKount: $td.eq(2).text(),
                      response: $td.eq(3).text(),
                      score: $td.eq(4).text(),
                    }
          }).get();
  }

  if(playersDice) {
    const name = prompt('What is your name?')
    socket.emit('new-user', roomName, name)
  }
  socket.on('dice', (dice) => {
    let str = '<div class="ui tiny images">';
    dice.forEach((dice) => {
        str += '<img class="ui image" src="../images/die' + dice + '.png" alt="">';
    });
    str += '</div>';
    document.getElementById("players-dice").innerHTML = str;   
  });
  socket.on('playerData', (playerData) => {
    playerNumber = playerData.self.playerNumber;
    playerName = playerData.self.playerName;
    playerTurn = playerData.playerTurn;
    checkIfYourTurn(playerTurn, playerNumber);
  });
  socket.on('invalidRaise', () => {
    alert('Your raise is not higher than the current bet. Try again.')
  });
  socket.on('raise', (raiseInfo) => {
    currentValue.innerText = raiseInfo.raiseValue;
    currentQuantity.innerText = raiseInfo.raiseQuantity;
    playerTurn = raiseInfo.playerTurn;
    checkIfYourTurn(playerTurn, playerNumber);
  });
  socket.on('next-player', (playerTurn) => {
    checkIfYourTurn(playerTurn, playerNumber);
  });
  socket.on('player-board', (data) => {
    playerTable = playerTableHeader;
    data.forEach((user) => {
      playerTable += `<tr><td>${user.playerNumber}</td>
                      <td>${user.playerName}</td>
                      <td>${user.diceKount}</td>
                      <td>${user.response}</td>
                      <td>${user.score}</td></tr>`
    })
    playerTable += `</table>`
    playerBoard.innerHTML = playerTable;
  })
  socket.on('reset-call', () => {
    currentValue.innerText = 2;
    currentQuantity.innerText = 1;
  })
  

  let raiseFormSubmission = (e) => {
    e.preventDefault();
  }
  document.querySelector('#raiseForm')
  .addEventListener('submit', raiseFormSubmission)
</script>

</body>
</html>